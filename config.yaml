languages:
    "nodejs": 
        "name": NodeJS
        "versions_url": 
            - https://nodejs.org/download/release/
        "versions_pattern":
            "patch": >-
                v{major}.{minor}.{patch}.*
            "minor": >-
                v{major}.{minor}.\d+.*
            "major": >-
                v{major}.\d+.\d+.*
            "none": >-
                v(\d+.\d+.\d+).*
        "download_url": 
            - https://nodejs.org/download/release/v{latest_version}/
        "download_pattern":
            "x64": >-
                /download/release/v{latest_version}/node-v{latest_version}-win-x64.zip
            "x86": >-
                /download/release/v{latest_version}/node-v{latest_version}-win-x86.zip
        "file": node.exe
        "path":
            - .
        "version_command": -v
        "version_pattern": >-
            v(\d+.\d+.\d+)
        "post_install": |
            import shutil
            import os

            extracted_items = os.listdir(install_path)
            if len(extracted_items) == 1:
                subfolder = os.path.join(install_path, extracted_items[0])
                
                if os.path.isdir(subfolder):
                    for item in os.listdir(subfolder):
                        shutil.move(os.path.join(subfolder, item), install_path)
                    os.rmdir(subfolder)
                    typer.echo(f"Moved contents from {subfolder} to {install_path}")
    "python": 
        "name": Python
        "versions_url": 
            - https://www.python.org/ftp/python/
        "versions_pattern":
            "patch": >-
                {major}.{minor}.{patch}.*
            "minor": >-
                {major}.{minor}.\d+.*
            "major": >-
                {major}.\d+.\d+.*
            "none": >-
                (\d+.\d+.\d+).*
        "download_url": 
            - https://www.python.org/ftp/python/{latest_version}/
        "download_pattern":
            "x64": >-
                python-{latest_version}-embed-amd64.zip
            "x86": >-
                python-{latest_version}-embed-win32.zip
        "file": python.exe
        "path":
            - .
            - Scripts
        "version_command": --version
        "version_pattern": >-
            Python (\d+.\d+.\d+)
        "post_install": |
            import requests
            import subprocess
            import os

            get_pip_path = os.path.join(install_path, "get-pip.py")
            response = requests.get("https://bootstrap.pypa.io/get-pip.py")
            response.raise_for_status()
            with open(get_pip_path, "wb") as f:
                f.write(response.content)
            subprocess.run([os.path.join(install_path, "python.exe"), get_pip_path], check=True)
            typer.echo("Successfully installed pip for Python.")
            pth_files = [f for f in os.listdir(install_path) if f.startswith("python") and f.endswith("._pth")]
            for pth_file in pth_files:
                with open(os.path.join(install_path, pth_file), "a") as f:
                    f.write("\nimport site\n")
            typer.echo("Rewritten ._pth files to contain 'import site'.")
            subprocess.run([os.path.join(install_path, "python.exe"), "-m", "pip", "install", "pipx"], check=True)
            typer.echo("Successfully installed pipx for Python.")
    "php": 
        "name": PHP
        "versions_url": 
            - https://windows.php.net/downloads/releases/
            - https://windows.php.net/downloads/releases/archives/
        "versions_pattern":
            "patch": >-
                .*php-{major}.{minor}.{patch}.*
            "minor": >-
                .*php-{major}.{minor}.\d+.*
            "major": >-
                .*php-{major}.\d+.\d+.*
            "none": >-
                .*php-(\d+.\d+.\d+).*
        "download_url": 
            - https://windows.php.net/downloads/releases/
            - https://windows.php.net/downloads/releases/archives/
        "download_pattern":
            "x64": >-
                .*php-{latest_version}-Win32-.*-x64.zip
            "x86": >-
                .*php-{latest_version}-Win32-.*-x86.zip
        "file": php.exe
        "path":
            - .
            - composer
            - composer\\vendor\\bin
        "version_command": -v
        "version_pattern": >-
            PHP (\d+.\d+.\d+)
        "post_install": |
            import requests
            import subprocess
            import os

            composer_path = os.path.join(install_path, "composer")
            os.makedirs(composer_path)
            composer_setup_path = os.path.join(install_path, "composer-setup.php")
            response = requests.get("https://getcomposer.org/installer")
            response.raise_for_status()
            with open(composer_setup_path, "wb") as f:
                f.write(response.content)
            subprocess.run([os.path.join(install_path, "php.exe"), "-d", "extension_dir='ext'", "-d", "extension=openssl", composer_setup_path, "--install-dir", composer_path], check=True)
            with open(os.path.join(composer_path, "composer.bat"), "w") as file:
                file.write(f'"{os.path.join(install_path, "php.exe")}" "{os.path.join(composer_path, "composer.phar")}" %*')
            with open(os.path.join(composer_path, "composer"), "w") as file:
                file.write(f'#!/bin/bash\n"{os.path.join(install_path, "php.exe")}" "{os.path.join(composer_path, "composer.phar")}" "$@"')
            os.chmod(os.path.join(composer_path, "composer"), 0o755)
            typer.echo("Successfully installed Composer for PHP.")
            os.environ["COMPOSER_HOME"] = composer_path
            subprocess.run([os.path.join(install_path, "php.exe"), "-d", "extension_dir='ext'", "-d", "extension=openssl", os.path.join(composer_path, "composer.phar"), "global", "require", "cpx/cpx"], check=True)
            typer.echo("Successfully installed CPX for PHP.")
    "go": 
        "name": Go
        "versions_url": 
            - https://go.dev/dl/
        "versions_pattern":
            "patch": >-
                /dl/go{major}.{minor}.{patch}.*
            "minor": >-
                /dl/go{major}.{minor}.\d+.*
            "major": >-
                /dl/go{major}.\d+.\d+.*
            "none": >-
                /dl/go(\d+.\d+.\d+).*
        "download_url": 
            - https://go.dev/dl/
        "download_pattern":
            "x64": >-
                /dl/go{latest_version}.windows-amd64.zip
            "x86": >-
                /dl/go{latest_version}.windows-386.zip
        "file": bin\\go.exe
        "path":
            - bin
        "version_command": version
        "version_pattern": >-
            go(\d+.\d+.\d+)
        "post_install": |
            import shutil
            import os
            
            extracted_items = os.listdir(install_path)
            if len(extracted_items) == 1:
                subfolder = os.path.join(install_path, extracted_items[0])
                
                if os.path.isdir(subfolder):
                    for item in os.listdir(subfolder):
                        shutil.move(os.path.join(subfolder, item), install_path)
                    os.rmdir(subfolder)
                    typer.echo(f"Moved contents from {subfolder} to {install_path}")
    "rust": 
        "name": Rust
        "versions_url": 
            - https://forge.rust-lang.org/infra/other-installation-methods.html
            - https://forge.rust-lang.org/infra/archive-stable-version-installers.html
        "versions_pattern":
            "patch": >-
                .*/dist/rust-{major}.{minor}.{patch}.*
            "minor": >-
                .*/dist/rust-{major}.{minor}.\d+.*
            "major": >-
                .*/dist/rust-{major}.\d+.\d+.*
            "none": >-
                .*/dist/rust-(\d+.\d+.\d+).*
        "download_url": 
            - https://forge.rust-lang.org/infra/other-installation-methods.html
            - https://forge.rust-lang.org/infra/archive-stable-version-installers.html
        "download_pattern":
            "x64": >-
                .*/dist/rust-{latest_version}-x86_64-pc-windows-msvc.tar.*
            "x86": >-
                .*/dist/rust-{latest_version}-i686-pc-windows-msvc.tar.*
        "file": rustc\\bin\\rustc.exe
        "path":
            - rustc\\bin
            - cargo\\bin
        "version_command": --version
        "version_pattern": >-
            rustc (\d+.\d+.\d+)
        "post_install": |
            import shutil
            import os

            extracted_items = os.listdir(install_path)
            if len(extracted_items) == 1:
                subfolder = os.path.join(install_path, extracted_items[0])
                
                if os.path.isdir(subfolder):
                    for item in os.listdir(subfolder):
                        shutil.move(os.path.join(subfolder, item), install_path)
                    os.rmdir(subfolder)
                    typer.echo(f"Moved contents from {subfolder} to {install_path}")
    "ruby": 
        "name": Ruby
        "versions_url": 
            - https://rubyinstaller.org/downloads/archives/
        "versions_pattern":
            "patch": >-
                .*rubyinstaller-{major}.{minor}.{patch}.*
            "minor": >-
                .*rubyinstaller-{major}.{minor}.\d+.*
            "major": >-
                .*rubyinstaller-{major}.\d+.\d+.*
            "none": >-
                .*rubyinstaller-(\d+.\d+.\d+).*
        "download_url": 
            - https://rubyinstaller.org/downloads/archives/
        "download_pattern":
            "x64": >-
                .*rubyinstaller-{latest_version}.*-x64.7z
            "x86": >-
                .*rubyinstaller-{latest_version}.*-x86.7z
        "file": bin\\ruby.exe
        "path":
            - bin
        "version_command": -v
        "version_pattern": >-
            ruby (\d+.\d+.\d+)
        "post_install": |
            import shutil
            import os
            
            extracted_items = os.listdir(install_path)
            if len(extracted_items) == 1:
                subfolder = os.path.join(install_path, extracted_items[0])
                
                if os.path.isdir(subfolder):
                    for item in os.listdir(subfolder):
                        shutil.move(os.path.join(subfolder, item), install_path)
                    os.rmdir(subfolder)
                    typer.echo(f"Moved contents from {subfolder} to {install_path}")